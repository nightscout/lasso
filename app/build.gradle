buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
//        classpath 'org.robolectric:robolectric-gradle-plugin:1.0.0'
        classpath 'org.robolectric:robolectric-gradle-plugin:1.1.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'org.robolectric'
apply plugin: 'idea'

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
def codeName = "Dreamsicle"

android {
    compileSdkVersion 21
//    buildToolsVersion "22.0.0"
    buildToolsVersion '21.1.1'

    defaultConfig {
//        applicationId "org.nightscout.scout"
        minSdkVersion 16
        targetSdkVersion 18
        versionCode 1
        versionName "1.0a"
        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        buildConfigField "String", "VERSION_CODENAME", "\"${codeName}\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        quiet false
        checkAllWarnings true
        warningsAsErrors false
        abortOnError true
        textReport true
        textOutput 'stdout'
        htmlOutput file("lint-report.html")
        htmlReport true
        checkReleaseBuilds true
        warning 'ProtectedPermissions', 'InvalidPackage'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

android.testOptions.unitTests.all {
    // Configure includes / excludes
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'

    // use afterTest to listen to the test execution results
    afterTest { descriptor, result ->
        println "Executing test for ${descriptor.name} with result: ${result.resultType}"
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.michaelpardo:activeandroid:3.1.0-SNAPSHOT'
    compile 'com.jakewharton:butterknife:4.0.1'
    compile 'com.squareup.dagger:dagger:1.2.2'
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    testCompile('org.robolectric:robolectric:3.0-rc3') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testCompile 'org.robolectric:shadows-support-v4:3.0-rc2'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile('junit:junit:4.12') {
        exclude module: 'hamcrest-core'
    }
    compile project(':core')
}

//test {
//    filter {
//        //include specific method in any of the tests
//        includeTestsMatching "*Test"
//
//    }
//}

jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/jacoco")
}

def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"

    description = "Generate Jacoco app coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/USB/*.*',
                       '**/proto/*.*',
                       '**/Manifest*.*', '**/*$*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

idea {
    module {
        testOutputDir = file('build/test-classes/debug')
    }
}

sourceSets {
    main {
        java.srcDirs = ['src']
    }
}